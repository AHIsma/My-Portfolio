{"version":3,"sources":["webpack://src/sections/Home/Home.scss","webpack://src/sass/typed.scss","webpack://src/assets/images/style.css"],"names":[],"mappings":"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","file":"10.af818878.chunk.css","sourcesContent":[".input-wrapper{display:block;font-size:225%;font-weight:bolder;margin-top:10px;margin-bottom:10px;width:50%}.input-wrapper>input,.input-wrapper>.placeholder{display:block;appearance:none;width:100%;height:100%;background-color:rgba(0,0,0,0);border:none}.input-wrapper>.placeholder{pointer-events:none}.input-wrapper>.placeholder::before{content:\"​\";content:\"​\"/\"Ismail AH\";alt:\"Ismail AH\";white-space:break-spaces;will-change:content;animation:typed-0 4.62s linear 1s infinite forwards}.input-wrapper>.placeholder::after{content:\"​\";position:relative;display:inline-block;padding-right:2px;border-right:2px solid currentColor;white-space:nowrap;animation:typed-0-caret 0.75s linear 1s infinite forwards}@keyframes typed-0{0%,2.1635021645%{content:\"​I\";content:\"​I\"/\"Ismail AH\";alt:\"Ismail AH\"}2.1645021645%,4.328004329%{content:\"​Is\";content:\"​Is\"/\"Ismail AH\";alt:\"Ismail AH\"}4.329004329%,6.4925064935%{content:\"​Ism\";content:\"​Ism\"/\"Ismail AH\";alt:\"Ismail AH\"}6.4935064935%,8.657008658%{content:\"​Isma\";content:\"​Isma\"/\"Ismail AH\";alt:\"Ismail AH\"}8.658008658%,10.8215108225%{content:\"​Ismai\";content:\"​Ismai\"/\"Ismail AH\";alt:\"Ismail AH\"}10.8225108225%,12.986012987%{content:\"​Ismail\";content:\"​Ismail\"/\"Ismail AH\";alt:\"Ismail AH\"}12.987012987%,15.1505151515%{content:\"​Ismail \";content:\"​Ismail \"/\"Ismail AH\";alt:\"Ismail AH\"}15.1515151515%,17.315017316%{content:\"​Ismail A\";content:\"​Ismail A\"/\"Ismail AH\";alt:\"Ismail AH\"}17.316017316%,64.5011645022%{content:\"​Ismail AH\";content:\"​Ismail AH\"/\"Ismail AH\";alt:\"Ismail AH\"}64.5021645022%,66.2327662338%{content:\"​Ismail A\";content:\"​Ismail A\"/\"Ismail AH\";alt:\"Ismail AH\"}66.2337662338%,67.9643679654%{content:\"​Ismail \";content:\"​Ismail \"/\"Ismail AH\";alt:\"Ismail AH\"}67.9653679654%,69.695969697%{content:\"​Ismail\";content:\"​Ismail\"/\"Ismail AH\";alt:\"Ismail AH\"}69.696969697%,71.4275714286%{content:\"​Ismai\";content:\"​Ismai\"/\"Ismail AH\";alt:\"Ismail AH\"}71.4285714286%,73.1591731602%{content:\"​Isma\";content:\"​Isma\"/\"Ismail AH\";alt:\"Ismail AH\"}73.1601731602%,74.8907748918%{content:\"​Ism\";content:\"​Ism\"/\"Ismail AH\";alt:\"Ismail AH\"}74.8917748918%,76.6223766234%{content:\"​Is\";content:\"​Is\"/\"Ismail AH\";alt:\"Ismail AH\"}76.6233766234%,78.353978355%{content:\"​I\";content:\"​I\"/\"Ismail AH\";alt:\"Ismail AH\"}78.354978355%,100%{content:\"​\";content:\"​\"/\"Ismail AH\";alt:\"Ismail AH\"}}@keyframes typed-0-caret{75%{border-color:rgba(0,0,0,0)}}.input-wrapper>input:focus+.placeholder,.input-wrapper>input:active+.placeholder{display:none}","$__typed-pauses-chars: (fwd: \"\\200b\", bwd: \"\\200c\", both: \"\\feff\");\r\n@function __typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $string-nth, $char-nth, $modifier) {\r\n\t$string: nth($strings, $string-nth);\r\n\t$length: str-length($string);\r\n\t$fwd-string: __typed-remove-bwd-pause-chars($string);\r\n\t$fwd-length: str-length($fwd-string);\r\n\t$bwd-string: __typed-remove-fwd-pause-chars($string);\r\n\t$bwd-length: str-length($bwd-string);\r\n\t$combined-length: $fwd-length + $bwd-length;\r\n\t$strings-past: $string-nth - 1;\r\n\t$time: 0;\r\n\t@while $strings-past > 0 {\r\n\t\t$past-string: nth($strings, $strings-past);\r\n\t\t$past-length: str-length($past-string);\r\n\t\t$past-fwd-length: str-length(__typed-remove-bwd-pause-chars($past-string));\r\n\t\t$past-bwd-length: str-length(__typed-remove-fwd-pause-chars($past-string));\r\n\t\t$time: $time\r\n\t\t\t+ $dur-char-fwd * $past-fwd-length\r\n\t\t\t+ $dur-char-bwd * $past-bwd-length\r\n\t\t\t+ $dur-full-gap + $dur-done-gap;\r\n\t\t$strings-past: $strings-past - 1;\r\n\t}\r\n\t@if $char-nth <= $fwd-length {\r\n\t\t$time: $time\r\n\t\t\t+ $dur-char-fwd * ($char-nth - 1);\r\n\t} @else {\r\n\t\t$time: $time\r\n\t\t\t+ $dur-char-fwd * $fwd-length\r\n\t\t\t+ $dur-full-gap\r\n\t\t\t+ $dur-char-bwd * ($char-nth - $fwd-length);\r\n\t}\r\n\t@return (calc($time / $dur-total) * 100 + $modifier) + \"%\";\r\n}\r\n@function __typed-get-all-keys($lists...) {\r\n\t$all-keys: ();\r\n\t@each $list in $lists {\r\n\t\t@each $map in $list {\r\n\t\t\t@each $prop in map-keys($map) {\r\n\t\t\t\t$all-keys: append($all-keys, $prop, comma);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t@return $all-keys;\r\n}\r\n@mixin __typed-write-to-content($string, $alt-text, $prefix: \"\") {\r\n\t// @supports (content: \"x\" / \"y\") {\r\n\t// \tcontent: $string / \"#{$alt-text}\";\r\n\t// }\r\n\t// @supports not (content: \"x\" / \"y\") {\r\n\t// \tcontent: $string;\r\n\t// \talt: \"#{$alt-text}\";\r\n\t// }\r\n\tcontent: \"​#{__typed-sanitize-pause-chars($prefix)}#{__typed-sanitize-pause-chars($string)}\";\r\n\tcontent: \"​#{__typed-sanitize-pause-chars($prefix)}#{__typed-sanitize-pause-chars($string)}\" / \"#{__typed-sanitize-pause-chars($alt-text)}\";\r\n\talt: \"#{__typed-sanitize-pause-chars($alt-text)}\";\r\n}\r\n@mixin __typed-spread-styles($styles: (), $nth: null, $addtl-styles...) {\r\n\t@if type-of($styles) == list {\r\n\t\t@if (length($styles) > 0 and $nth != null) or length($addtl-styles) > 0 {\r\n\t\t\t$all-props: __typed-get-all-keys($styles, $addtl-styles);\r\n\t\t\t@if length($styles) > 0 and $nth != null { $styles: nth($styles, $nth); }\r\n\t\t\t@if length($addtl-styles) > 0 {\r\n\t\t\t\t@each $style-group in $addtl-styles {\r\n\t\t\t\t\t// @error \"#{$style-group}\";\r\n\t\t\t\t\t$styles: map-merge($styles, $style-group);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t@each $prop in $all-props {\r\n\t\t\t\t$value: if(map-get($styles, $prop) == null, unset, map-get($styles, $prop));\r\n\t\t\t\t#{$prop}: if(type-of($value) == list, append($value, null, auto), $value);\r\n\t\t\t}\r\n\t\t}\r\n\t} @else if type-of($styles) == map {\r\n\t\t@if length(map-keys($styles)) > 0 {\r\n\t\t\t@each $prop, $value in $styles {\r\n\t\t\t\t#{$prop}: if(type-of($value) == list, append($value, null, auto), $value);\r\n\t\t\t}\r\n\t\t}\r\n\t} @else {\r\n\t\t@error \"__typed-spread-styles requires the $styles argument to be either a map or a list of maps.\";\r\n\t}\r\n}\r\n@mixin __typed-final-build-animation($dur-char-fwd, $string, $animation-name, $alt-text, $prefix, $end-styles: (), $styles: ()) {\r\n\t@keyframes #{$animation-name}-final {\r\n\t\t@for $i from 1 through str-length($string) {\r\n\t\t\t$modifier: .001;\r\n\t\t\t@if $i == 1 { $modifier: 0; }\r\n\t\t\t#{($i - 1) / str-length($string) * 100 + $modifier}%, #{$i / str-length($string) * 100}% {\r\n\t\t\t\t@include __typed-write-to-content(str-slice($string, 1, $i), $alt-text, $prefix);\r\n\t\t\t\t@if $i == str-length($string) {\r\n\t\t\t\t\t@include __typed-spread-styles(map-merge($styles, $end-styles));\r\n\t\t\t\t} @else {\r\n\t\t\t\t\t@include __typed-spread-styles($styles);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n@function __typed-instances-of($data, $search) {\r\n\t$instances: 0;\r\n\t@if type-of($data) == list or type-of($data) == map { @each $item in $data { @if $item == $search { $instances: $instances + 1; } } }\r\n\t@else if type-of($data) == string {\r\n\t\t@if type-of($search) != string { @error \"When searching a string using instances-of, your search argument must also be a string.\"; }\r\n\t\t@if str-length($search) < 1 { @error \"When searching a string using instances-of, your search string must be at least one character in length.\"; }\r\n\t\t@for $i from 1 through str-length($data) - str-length($search) + 1 { @if str-slice($data, $i, $i + str-length($search) - 1) == $search { $instances: $instances + 1; } }\r\n\t} @else { @error \"instances-of requires one parameter of type map, list, or string, and a second argument of the value searching for within that data.\"; }\r\n\t@return $instances;\r\n}\r\n@function __typed-instances-of-not($data, $search) {\r\n\t@if type-of($data) == list or type-of($data) == map { @return length($data) - __typed-instances-of($data, $search); }\r\n\t@else if type-of($data) == string { @return str-length($data) - __typed-instances-of($data, $search); }\r\n\t@else { @error \"instances-of requires one parameter of type map, list, or string, and a second argument of the value searching for within that data.\"; }\r\n}\r\n// ...\r\n//\r\n// CREDIT BEGIN :: aliased str-replace/to-length/to-number functions are courtesy of Kitty Giraudel (kittygiraudel.com)\r\n\t\t\t@function __typed-str-replace($string, $search, $replace: \"\") {\r\n\t\t\t\t$index: str-index($string, $search);\r\n\t\t\t\t@if $index { @return str-slice($string, 1, $index - 1) + $replace + __typed-str-replace(str-slice($string, $index + str-length($search)), $search, $replace); }\r\n\t\t\t\t@return $string;\r\n\t\t\t}\r\n\t\t\t@function __typed-to-length($value, $unit) {\r\n\t\t\t\t$units: (\"px\": 1px, \"cm\": 1cm, \"mm\": 1mm, \"%\": 1%, \"ch\": 1ch, \"pc\": 1pc, \"in\": 1in, \"em\": 1em, \"rem\": 1rem, \"pt\": 1pt, \"ex\": 1ex, \"vw\": 1vw, \"vh\": 1vh, \"vmin\": 1vmin, \"vmax\": 1vmax);\r\n\t\t\t\t@if not index(map-keys($units), $unit) { $_: log(\"Invalid unit `#{$unit}`.\"); }\r\n\t\t\t\t@return $value * map-get($units, $unit);\r\n\t\t\t}\r\n\t\t\t@function __typed-to-number($value) {\r\n\t\t\t\t@if type-of($value) == \"number\" { @return $value; }\r\n\t\t\t\t@else if type-of($value) != \"string\" { $_: log(\"Value for `__typed-to-number` should be a number or a string.\"); }\r\n\t\t\t\t$result: 0; $digits: 0; $minus: str-slice($value, 1, 1) == \"-\"; $numbers: (\"0\": 0, \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9);\r\n\t\t\t\t@for $i from if($minus, 2, 1) through str-length($value) {\r\n\t\t\t\t\t$character: str-slice($value, $i, $i);\r\n\t\t\t\t\t@if not (index(map-keys($numbers), $character) or $character == \".\") { @return __typed-to-length(if($minus, -$result, $result), str-slice($value, $i)) }\r\n\t\t\t\t\t@if $character == \".\" { $digits: 1; }\r\n\t\t\t\t\t@else if $digits == 0 { $result: $result * 10 + map-get($numbers, $character); }\r\n\t\t\t\t\t@else { $digits: $digits * 10; $result: $result + map-get($numbers, $character) / $digits; }\r\n\t\t\t\t}\r\n\t\t\t\t@return if($minus, -$result, $result);\r\n\t\t\t}\r\n// CREDIT END\r\n//\r\n// ...\r\n@function __typed-str-replace-multi($string, $searches, $replace: \"\") {\r\n\t@each $search in $searches { $string: __typed-str-replace($string, $search, $replace); }\r\n\t@return $string;\r\n}\r\n@function __typed-remove-pause-chars($str) { @return __typed-str-replace-multi($str, map-values($__typed-pauses-chars)); }\r\n@function __typed-remove-fwd-pause-chars($str) { @return __typed-str-replace($str, map-get($__typed-pauses-chars, fwd)); }\r\n@function __typed-remove-bwd-pause-chars($str) { @return __typed-str-replace($str, map-get($__typed-pauses-chars, bwd)); }\r\n@function __typed-remove-both-pause-chars($str) { @return __typed-str-replace($str, map-get($__typed-pauses-chars, both)); }\r\n@function __typed-sanitize-pause-chars($str) { @return __typed-remove-pause-chars(__typed-inject-pauses($str)); }\r\n@function __typed-inject-pauses($str, $default-mode: \"fwd\") {\r\n\t@while str-index($str, \"<[\") != null and str-index($str, \"]>\") != null and str-index($str, \"]>\") > str-index($str, \"<[\") {\r\n\t\t$start: str-index($str, \"<[\"); $end: str-index($str, \"]>\");\r\n\t\t$is-fwd: str-slice($str, $start + 2, $start + 2) == \"_\";\r\n\t\t$is-bwd: str-slice($str, $end - 1, $end - 1) == \"_\";\r\n\t\t$is-both: $is-fwd and $is-bwd;\r\n\t\t$space-char:\r\n\t\t\tif($is-both,\r\n\t\t\t\tmap-get($__typed-pauses-chars, both),\r\n\t\t\t\tif($is-bwd,\r\n\t\t\t\t\tmap-get($__typed-pauses-chars, bwd),\r\n\t\t\t\t\tif($is-fwd,\r\n\t\t\t\t\t\tmap-get($__typed-pauses-chars, fwd),\r\n\t\t\t\t\t\tmap-get($__typed-pauses-chars, $default-mode)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t$value: __typed-to-number(str-slice($str, $start + if($is-fwd, 3, 2), $end - if($is-bwd, 2, 1)));\r\n\t\t$spaces: \"\"; @for $i from 0 to $value { $spaces: $spaces + $space-char; }\r\n\t\t$str: str-slice($str, 1, $start - 1) + $spaces + str-slice($str, $end + 2, -1);\r\n\t}\r\n\t@return $str;\r\n}\r\n$__typed-id: 0;\r\n@mixin typed($parameters...) {\r\n\t$strings: ();\r\n\t$strings-styles: ();\r\n\t$final-string-styles: ();\r\n\t$speeds: (\r\n\t\ttype: .1,\r\n\t\tpause-typed: 2,\r\n\t\tdelete: .08,\r\n\t\tpause-deleted: 1\r\n\t);\r\n\t$options: (\r\n\t\tname: \"\",\r\n\t\titerations: infinite,\r\n\t\tcaret: true,\r\n\t\tcaret-speed: .75,\r\n\t\tcaret-width: 1ch,\r\n\t\tcaret-color: currentColor,\r\n\t\tcaret-space: .1ch,\r\n\t\tstyles: (),\r\n\t\tend-styles: (),\r\n\t\tdelay: 1,\r\n\t\ttype-pausing: true,\r\n\t\ttype-pausing-default: \"fwd\",\r\n\t\tprefix: \"\",\r\n\t\tend-on: \"\",\r\n\t\talt-text: \"\"\r\n\t);\r\n\t$strings-complete: false;\r\n\t$speeds-complete: false;\r\n\t$options-complete: false;\r\n\t$parameter-nth: 1;\r\n\t@each $parameter in $parameters {\r\n\t\t@if not $strings-complete {\r\n\t\t\t@if $parameter-nth == 1 and type-of($parameter) == map {\r\n\t\t\t\t$strings: join($strings, map-keys($parameter));\r\n\t\t\t\t$strings-styles: join($strings-styles, map-values($parameter));\r\n\t\t\t\t$strings-complete: true;\r\n\t\t\t} @else if type-of($parameter) == string {\r\n\t\t\t\t$strings: append($strings, $parameter);\r\n\t\t\t} @else {\r\n\t\t\t\t@error \"Strings are required in the formats of either separate sequential string arguments, or a single map with each string represented as the key of its own map of associated styles.\";\r\n\t\t\t}\r\n\t\t\t@if length($parameters) > $parameter-nth and type-of(nth($parameters, $parameter-nth + 1)) != string {\r\n\t\t\t\t$strings-complete: true;\r\n\t\t\t}\r\n\t\t} @else if not $speeds-complete {\r\n\t\t\t@if type-of($parameter) == map {\r\n\t\t\t\t@each $key, $value in $parameter {\r\n\t\t\t\t\t@if map-get($speeds, $key) == null {\r\n\t\t\t\t\t\t@error \"#{$key} is not a valid speed property. Accepted speed property keys are #{append(map-keys($speeds), null, comma)}.\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t@if type-of($value) != number {\r\n\t\t\t\t\t\t@error \"The value #{$value} is not a number.\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$speeds: map-merge($speeds, ($key: $value));\r\n\t\t\t\t}\r\n\t\t\t} @else if type-of($parameter) == list {\r\n\t\t\t\t@if length($parameter) > 4 {\r\n\t\t\t\t\t@error \"The speed list argument only accepts 4 numbers when used a list.\";\r\n\t\t\t\t}\r\n\t\t\t\t@for $i from 1 through length($parameter) {\r\n\t\t\t\t\t@if nth($parameter, $i) != null and type-of(nth($parameter, $i)) != number {\r\n\t\t\t\t\t\t@error \"The value #{$value} is not a number.\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t@if nth($parameter, $i) != null {\r\n\t\t\t\t\t\t$speeds: map-merge($speeds, (nth(map-keys($speeds), $i): nth($parameter, $i)));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} @else if type-of($parameter) == number {\r\n\t\t\t\t@if $parameter <= 0 {\r\n\t\t\t\t\t@error \"When passing a numeric value into the $speeds argument, it works as a multiplier and thereby requires a positive non-zero number (integer or float). To slow down the default speed, use a decimal number between 0 and 1. To speed up the default speed, use a number greater than 1. A value of 0.5 will reduce the speed by 50%, where a value of 2 will double the speed.\";\r\n\t\t\t\t}\r\n\t\t\t\t@each $key, $value in $speeds {\r\n\t\t\t\t\t$speeds: map-merge($speeds, ($key: $value * calc(1 / $parameter)));\r\n\t\t\t\t}\r\n\t\t\t} @else if $parameter != null {\r\n\t\t\t\t@error \"The speed argument requires either a map, list, or null value.\"\r\n\t\t\t}\r\n\t\t\t$speeds-complete: true;\r\n\t\t} @else if not $options-complete {\r\n\t\t\t@if $parameter != null {\r\n\t\t\t\t@if type-of($parameter) != map {\r\n\t\t\t\t\t@error \"#{$key} is not a valid options configuration map.\";\r\n\t\t\t\t}\r\n\t\t\t\t@each $key, $value in $parameter {\r\n\t\t\t\t\t@if map-get($options, $key) == null {\r\n\t\t\t\t\t\t@error \"#{$key} is not a valid options property. Accepted options property keys are #{append(map-keys($options), null, comma)}.\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t@if $key == iterations {\r\n\t\t\t\t\t\t@if $value != infinite and (type-of($value) == number and ($value < 0 or $value != round($value))) {\r\n\t\t\t\t\t\t\t@error \"The iterations value #{$value} requires a positive integer or infinite.\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} @else if $key == end-on {\r\n\t\t\t\t\t\t@if type-of($value) == map {\r\n\t\t\t\t\t\t\t@if length($value) != 1 {\r\n\t\t\t\t\t\t\t\t@error \"When using the end-on property as a map, the map must house a single value, also a map, with the map value containing the SCSS styles to apply to the end-on string.\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t@each $end-on, $end-on-styles in $value {\r\n\t\t\t\t\t\t\t\t@if type-of($end-on) == string {\r\n\t\t\t\t\t\t\t\t\t@if $end-on == \"\" {\r\n\t\t\t\t\t\t\t\t\t\t@error \"The end-on property requires a non-empty string.\";\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} @else if type-of($end-on) == number {\r\n\t\t\t\t\t\t\t\t\t@if $end-on < 0 or $end-on > length($strings) or $end-on != round($end-on) {\r\n\t\t\t\t\t\t\t\t\t\t@error \"If using a numeric end-on property value, it must be a positive integer between 1 and the number of the strings being used.\";\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t$end-on: nth($strings, $end-on);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t$final-string-styles: $end-on-styles;\r\n\t\t\t\t\t\t\t\t$value: $end-on;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} @else if type-of($value) == string {\r\n\t\t\t\t\t\t\t@if $value == \"\" {\r\n\t\t\t\t\t\t\t\t@error \"The end-on property requires a non-empty string.\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} @else if type-of($value) == number {\r\n\t\t\t\t\t\t\t@if $value < 0 or $value > length($strings) or $value != round($value) {\r\n\t\t\t\t\t\t\t\t@error \"If using a numeric end-on property value, it must be a positive integer between 1 and the number of the strings being used.\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t$value: nth($strings, $value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} @else if $key == caret-color {\r\n\t\t\t\t\t\t@if $value != currentColor and type-of($value) != color {\r\n\t\t\t\t\t\t\t@error \"The caret-color property requires a value of type color, or currentColor.\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} @else if ($key == styles or $key == end-styles) and not type-of($value) != map {\r\n\t\t\t\t\t\t@if type-of($value) != map {\r\n\t\t\t\t\t\t\t@error \"The #{$key} property requires a value of type map.\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} @else if $key == type-pausing-default {\r\n\t\t\t\t\t\t@if type-of($value) != string or ($value != \"fwd\" and $value != \"bwd\" and $value != \"both\") {\r\n\t\t\t\t\t\t\t@error \"The #{$key} property requires a value of either \\\"fwd\\\", \\\"bwd\\\", or \\\"both\\\".\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} @else if type-of($value) != type-of(map-get($options, $key)) {\r\n\t\t\t\t\t\t@error \"The #{$key} value #{$value} of type #{type-of($value)} does not match the required type #{type-of(map-get($options, $key))}.\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$options: map-merge($options, ($key: $value));\r\n\t\t\t\t}\r\n\t\t\t\t@if map-get($options, end-on) != \"\" and map-get($options, iterations) == infinite {\r\n\t\t\t\t\t@warn \"The end-on string will only be rendered when iterating a finite number of times. The current animation has an iterations value of infinite so the end-on value will be ignored and never rendered.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$options-complete: true;\r\n\t\t} @else {\r\n\t\t\t@error \"No additional arguments are permitted after the options object.\";\r\n\t\t}\r\n\t\t$parameter-nth: $parameter-nth + 1;\r\n\t}\r\n\t$dur-char-fwd: map-get($speeds, type);\r\n\t$dur-full-gap: map-get($speeds, pause-typed);\r\n\t$dur-char-bwd: map-get($speeds, delete);\r\n\t$dur-done-gap: map-get($speeds, pause-deleted);\r\n\t$animation-delay: map-get($options, delay);\r\n\t$final-string: if(map-get($options, end-on) != \"\", map-get($options, end-on), nth($strings, 1));\r\n\t$alt-text: if(map-get($options, alt-text) != \"\", map-get($options, alt-text), $final-string);\r\n\t$caret-width: map-get($options, caret-width);\r\n\t$caret-color: map-get($options, caret-color);\r\n\t$caret-space: map-get($options, caret-space);\r\n\t$caret-speed: map-get($options, caret-speed);\r\n\t$global-styles: map-get($options, styles);\r\n\t$end-styles: map-get($options, end-styles);\r\n\t$type-pausing: map-get($options, type-pausing);\r\n\t$type-pausing-default: map-get($options, type-pausing-default);\r\n\t$prefix: map-get($options, prefix);\r\n\t@if $type-pausing {\r\n\t\t@for $nth from 1 through length($strings) {\r\n\t\t\t$strings: set-nth($strings, $nth, __typed-inject-pauses(nth($strings, $nth), $type-pausing-default));\r\n\t\t}\r\n\t}\r\n\t@if $caret-speed < 0s {\r\n\t\t@error \"Delay requires a positive number value (integer or float) without units. #{$caret-speed} is less than 0.\";\r\n\t}\r\n\t@if $animation-delay < 0s {\r\n\t\t@error \"Delay requires a positive number value (integer or float) without units. #{$animation-delay} is less than 0.\";\r\n\t}\r\n\t$iterations: map-get($options, iterations);\r\n\t// initializing some values ✊🏼\r\n\t$animation-name: \"\";\r\n\t@if map-get($options, name) != \"\" {\r\n\t\t$animation-name: #{map-get($options, name)};\r\n\t} @else {\r\n\t\t$animation-name: typed-#{$__typed-id};\r\n\t\t$__typed-id: $__typed-id + 1 !global;\r\n\t}\r\n\t$dur-total: 0;\r\n\t@each $string in $strings {\r\n\t\t$fwd-length: str-length(__typed-remove-bwd-pause-chars($string));\r\n\t\t$bwd-length: str-length(__typed-remove-fwd-pause-chars($string));\r\n\t\t$dur-total: $dur-total\r\n\t\t\t+ $dur-char-fwd * $fwd-length\r\n\t\t\t+ $dur-full-gap\r\n\t\t\t+ $dur-char-bwd * $bwd-length\r\n\t\t\t+ $dur-done-gap\r\n\t}\r\n\t&::before {\r\n\t\t@include __typed-write-to-content(\"\", $alt-text, $prefix);\r\n\t\twhite-space: break-spaces;\r\n\t\twill-change: content;\r\n\t\t@if $iterations == infinite {\r\n\t\t\tanimation: #{$animation-name} #{$dur-total}s linear #{$animation-delay}s #{$iterations} forwards;\r\n\t\t} @else {\r\n\t\t\tanimation:\r\n\t\t\t\t#{$animation-name} #{$dur-total}s linear #{$animation-delay}s #{$iterations} forwards,\r\n\t\t\t\t#{$animation-name}-final #{str-length($final-string) * $dur-char-fwd}s linear #{$dur-total * $iterations + $animation-delay}s 1 forwards;\r\n\t\t\t@include __typed-final-build-animation($dur-char-fwd, $final-string, $animation-name, $alt-text, $prefix, $end-styles, map-merge($global-styles, $final-string-styles));\r\n\t\t}\r\n\t}\r\n\t@if map-get($options, caret) {\r\n\t\t&::after {\r\n\t\t\tcontent: \"​\";\r\n\t\t\tposition: relative;\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tpadding-right: $caret-space;\r\n\t\t\tborder-right: #{$caret-width} solid #{$caret-color};\r\n\t\t\twhite-space: nowrap;\r\n\t\t\tanimation: #{$animation-name}-caret #{$caret-speed}s linear #{$animation-delay}s infinite forwards;\r\n\t\t}\r\n\t}\r\n\t// now THIS is where the magic happens... ✨\r\n\t@keyframes #{$animation-name} {\r\n\t\t@for $i from 1 through length($strings) {\r\n\t\t\t$string: nth($strings, $i);\r\n\t\t\t$fwd-string: __typed-remove-bwd-pause-chars($string);\r\n\t\t\t$fwd-length: str-length($fwd-string);\r\n\t\t\t$bwd-string: __typed-remove-fwd-pause-chars($string);\r\n\t\t\t$bwd-length: str-length($bwd-string);\r\n\t\t\t$combined-length: $fwd-length + $bwd-length;\r\n\t\t\t@for $j from 1 through $combined-length {\r\n\t\t\t\t@if $j < $combined-length {\r\n\t\t\t\t\t#{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i, $j, 0)}, #{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i, $j+1, -.001)} {\r\n\t\t\t\t\t\t@if $j <= $fwd-length {\r\n\t\t\t\t\t\t\t@include __typed-write-to-content(quote(#{str-slice($fwd-string, 1, $j)}), $alt-text, $prefix);\r\n\t\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t\t@include __typed-write-to-content(quote(#{str-slice($bwd-string, 1, $bwd-length - ($j - $fwd-length))}), $alt-text, $prefix);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t@include __typed-spread-styles($strings-styles, $i, $global-styles);\r\n\t\t\t\t\t}\r\n\t\t\t\t} @else {\r\n\t\t\t\t\t@if $i < length($strings) {\r\n\t\t\t\t\t\t#{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i, $j, 0)}, #{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i+1, 1, -.001)} {\r\n\t\t\t\t\t\t\t@include __typed-write-to-content(\"\", $alt-text, $prefix);\r\n\t\t\t\t\t\t\t@include __typed-spread-styles($strings-styles, $i, $global-styles);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t#{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i, $j, 0)}, 100% {\r\n\t\t\t\t\t\t\t@include __typed-write-to-content(\"\", $alt-text, $prefix);\r\n\t\t\t\t\t\t\t@include __typed-spread-styles($strings-styles, $i, $global-styles);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t@if map-get($options, caret) {\r\n\t\t@keyframes #{$animation-name}-caret {\r\n\t\t\t75% { border-color: transparent; }\r\n\t\t}\r\n\t}\r\n}","@-webkit-keyframes scaleAnimation {\r\n  0% {\r\n    opacity: 0;\r\n    transform: scale(1.5);\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n    transform: scale(1);\r\n  }\r\n}\r\n\r\n@keyframes scaleAnimation {\r\n  0% {\r\n    opacity: 0;\r\n    transform: scale(1.5);\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n    transform: scale(1);\r\n  }\r\n}\r\n@-webkit-keyframes drawCircle {\r\n  0% {\r\n    stroke-dashoffset: 151px;\r\n  }\r\n  100% {\r\n    stroke-dashoffset: 0;\r\n  }\r\n}\r\n@keyframes drawCircle {\r\n  0% {\r\n    stroke-dashoffset: 151px;\r\n  }\r\n  100% {\r\n    stroke-dashoffset: 0;\r\n  }\r\n}\r\n@-webkit-keyframes drawCheck {\r\n  0% {\r\n    stroke-dashoffset: 36px;\r\n  }\r\n  100% {\r\n    stroke-dashoffset: 0;\r\n  }\r\n}\r\n@keyframes drawCheck {\r\n  0% {\r\n    stroke-dashoffset: 36px;\r\n  }\r\n  100% {\r\n    stroke-dashoffset: 0;\r\n  }\r\n}\r\n@-webkit-keyframes fadeOut {\r\n  0% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n@keyframes fadeOut {\r\n  0% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n@-webkit-keyframes fadeIn {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n}\r\n@keyframes fadeIn {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n}\r\n#successAnimationCircle {\r\n  stroke-dasharray: 151px 151px;\r\n  stroke: #fff;\r\n}\r\n\r\n#successAnimationCheck {\r\n  stroke-dasharray: 36px 36px;\r\n  stroke: #fff;\r\n}\r\n\r\n#successAnimationResult {\r\n  fill: #fff;\r\n  opacity: 0;\r\n}\r\n\r\n#successAnimation.animated {\r\n  -webkit-animation: 1s ease-out 1.2s 1 both scaleAnimation;\r\n          animation: 1s ease-out 1.2s 1 both scaleAnimation;\r\n}\r\n#successAnimation.animated #successAnimationCircle {\r\n  -webkit-animation: 1s cubic-bezier(0.77, 0, 0.175, 1) 1.2s 1 both drawCircle, 0.3s linear 2.1s 1 both fadeOut;\r\n          animation: 1s cubic-bezier(0.77, 0, 0.175, 1) 1.2s 1 both drawCircle, 0.3s linear 2.1s 1 both fadeOut;\r\n}\r\n#successAnimation.animated #successAnimationCheck {\r\n  -webkit-animation: 1s cubic-bezier(0.77, 0, 0.175, 1) 1.2s 1 both drawCheck, 0.3s linear 2.1s 1 both fadeOut;\r\n          animation: 1s cubic-bezier(0.77, 0, 0.175, 1) 1.2s 1 both drawCheck, 0.3s linear 2.1s 1 both fadeOut;\r\n}\r\n#successAnimation.animated #successAnimationResult {\r\n  -webkit-animation: 0.3s linear 2.1s both fadeIn;\r\n          animation: 0.3s linear 2.1s both fadeIn;\r\n}\r\n\r\n"]}